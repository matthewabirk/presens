{
    "contents" : "# Created by Matthew A. Birk\n# Dependencies: None\n# Converts txt file output from PreSens fiber optic O2 transmitters into usable dataframe\n# Last updated: Jan 2015\n\n#' Import Data from PreSens O2 Transmitter\n#'\n#' Imports the standard txt file output from most PreSens fiber optic O2 transmitters and converts data into a usable data.frame.\n#'\n#' The following PreSens fiber optic O2 transmitters are supported:\n#' \\describe{\n#' \\item{Fibox 3}{}\n#' \\item{Fibox 3 trace}{}\n#' \\item{Fibox 3 LCD trace}{}\n#' \\item{Microx TX3}{}\n#' \\item{Microx TX3 trace}{}\n#' \\item{OXY-4 mini}{}\n#' \\item{OXY-4 micro}{}\n#' \\item{OXY-4 trace}{}\n#' \\item{OXY-10 mini}{}\n#' \\item{OXY-10 micro}{}\n#' \\item{OXY-10 trace}{}\n#' }\n#' It is very important to note that the PreSens fiber optics O2 transmitters that are supported with this function DO NOT account for salinity (i.e. they assume salinity = 0 ppt). If the water sample measured was not fresh water, the oxygen concentrations (e.g. mg per liter or umol per liter) are incorrect in the PreSens txt file. This function corrects these O2 concentrations based on the salinity value defined by the \\code{salinity} argument. Absolute partial pressures (i.e. hPa and torr) will also be slightly different due to the slight influence of salinity on water's vapor pressure. This difference is typically ~0.05\\% of the recorded value.\n#'\n#' @param file a character string. The filepath for the file to be read.\n#' @param o2_unit a character string. The unit of O2 measurement to be output in the data.frame. Options are:\\describe{\n#' \\item{percent_a.s.}{percent air saturation}\n#' \\item{percent_o2}{percent O2}\n#' \\item{hPa}{hPa}\n#' \\item{torr}{torr}\n#' \\item{mg_per_l}{mg O2 per liter}\n#' \\item{umol_per_l}{umol O2 per liter}\n#' }\n#' @param date a character string. The date format to be passed to \\code{\\link{strptime}}.\n#' @param salinity salinity of water sample (ppt). Default is 35 ppt.\n#'\n#' @return A data.frame with seven columns is returned.\n#' \\describe{\n#' \\item{TIME}{Date and time, POSIXct format.}\n#' \\item{DURATION}{Duration of measurement trial.}\n#' \\item{oxygen}{Oxygen measurement in desired unit. Column name changes based on \\code{o2_unit} argument.}\n#' \\item{PHASE}{Phase recorded. Phase is inversely related to O2.}\n#' \\item{AMPLITUDE}{Amplitude recorded. Amplitude is an indicator of the quality of the signal.}\n#' \\item{TEMPERATURE}{Temperature recorded or defined at beginning of measurement trial.}\n#' \\item{ERROR_CODE}{Error code from transmitter. See user manual for translation of error code.}\n#' }\n#' @author Matthew A. Birk, \\email{matthewabirk@@gmail.com}\n#'\n#' @note Conversions are estimates based on the \\code{\\link[marelac]{marelac}} package and therefore differ slightly from the conversions provided by PreSens.\n#' \n#' @examples\n#' \\dontrun{\n#' file <- system.file('extdata', 'all_o2_units.txt', package = 'presens')\n#' import_o2(file, o2_unit = 'umol_per_l', salinity = 25)\n#' }\n#'\n#' @encoding UTF-8\n#' @export\n\nimport_o2=function(file,o2_unit='percent_a.s.',date='%d/%m/%y',salinity=35)\n{\n  raw=readLines(file)\n  raw=gsub(pattern='\\xb0|\\xa9',replacement = ' ',raw) # replace non ASCII characters\n  raw=raw[sapply(raw,nchar)>0] # remove blank rows\n  f=suppressWarnings(raw[grep('logtime|Logtime',raw):length(raw)]) # start dataframe from one row below the word 'logtime'\n  f=gsub(pattern=' ',replacement='',f)\n  f=strsplit(f,split=';')\n  f=as.data.frame(matrix(unlist(f),ncol=8,byrow=TRUE),stringsAsFactors=FALSE)\n  o2_col=ifelse(o2_unit %in% c('percent_a.s.','percent_o2','hPa','torr','mg_per_l','umol_per_l'), toupper(o2_unit),stop('the o2_unit argument is not an acceptable unit',call.=F))\n  air_pres=suppressWarnings(as.numeric(na.omit(as.numeric(unlist(strsplit(raw[grep('Pressure',raw)],' |;')))))/1000)\n  colnames(f)=c('DATE','TIME','DURATION',o2_col,'PHASE','AMPLITUDE','TEMPERATURE','ERROR_CODE')\n  unit_id_index=c(grep('oxygen',f[,o2_col]),nrow(f))\n  o2_string_options=list(\n    percent_a.s.='oxygen/%airsatur.',\n    percent_o2='oxygen/%O2',\n    hPa='oxygen/hPa(mbar)',\n    torr='oxygen/Torr',\n    mg_per_l='oxygen/mg/L(ppm)',\n    umol_per_l='oxygen/umol/L'\n  )\n  desired_o2=suppressWarnings(na.omit(unlist(sapply(1:(length(unit_id_index)-1), function(x) as.numeric(f[unit_id_index[x]:unit_id_index[x+1],o2_col])/unlist(o2_unit_conv(salinity=0,temp=as.numeric(f[unit_id_index[x]:unit_id_index[x+1],'TEMPERATURE']),air_pres=air_pres)[names(o2_string_options[f[unit_id_index[x],o2_col]==o2_string_options])])*unlist(o2_unit_conv(salinity=salinity,temp=as.numeric(f[unit_id_index[x]:unit_id_index[x+1],'TEMPERATURE']),air_pres=air_pres)[o2_unit])))))\n  f[,'TIME']=as.data.frame(strptime(paste(f[,'DATE'],f[,'TIME']),paste(date,'%T')))\n  f[,'DATE']=NULL\n  f[,'DURATION']=suppressWarnings(as.numeric(f[,'DURATION']))\n  if(any(is.na(f[2:nrow(f),'DURATION']))) warning('Multiple units of O2 were recorded. All values were converted to ',o2_unit,call.=F)\n  f=f[-which(is.na(f[,'DURATION'])),]\n  if(any(is.na(f[2:nrow(f),'TIME']))) stop(paste('The time record does not match',date,'on at least some of the lines between',range(which(is.na(f[2:nrow(f),'TIME'])))[1],'and',range(which(is.na(f[2:nrow(f),'TIME'])))[2]),call.=F)\n  f[,o2_col]=as.numeric(desired_o2)\n  f[,'PHASE']=as.numeric(f[,'PHASE'])\n  f[,'AMPLITUDE']=as.numeric(f[,'AMPLITUDE'])\n  f[,'TEMPERATURE']=as.numeric(f[,'TEMPERATURE'])\n  f[,'ERROR_CODE']=as.factor(f[,'ERROR_CODE'])\n  if(sum(summary(f[,'ERROR_CODE'])[c('E0','ErrorMessage')],na.rm=TRUE)!=nrow(f)) warning('Errors recorded during trial! Check ERROR_CODE column',call.=F)\n  attr(f,'na.action')=NULL\n  row.names(f)=NULL\n  return(f)\n}",
    "created" : 1423428038721.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "632809923",
    "id" : "8497B2E9",
    "lastKnownWriteTime" : 1423578307,
    "path" : "~/Documents/Working Directories/R/Packages/presens/R/import_o2.R",
    "project_path" : "R/import_o2.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}